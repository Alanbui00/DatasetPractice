return(car)
}
colbest("mpg")
colbest <- function(name){
colname <- which.max(mtcars[,name])
car <- mtcars[colname,]
return(car)
}
colbest("mpg")
colbest("hp")
colbest <- function(name){
colname <- colnames(mtcars)
colindex <- colname[name]
colname <- which.max(mtcars[,colindex])
car <- mtcars[colname,]
return(car)
}
colbest("mpg")
colnames(mtcars)
#create a function that takes the column name and output the max of that column
colbest <- function(name){
colname <- colnames(mtcars)
colindex <- which(colname == name)
carsname <- which.max(mtcars[,colindex])
car <- mtcars[carsname]
return(car)
}
colbest("mpg")
colbest("mpg")
colbest <- function(name){
colname <- colnames(mtcars)
colindex <- which(colname == name)
carsname <- which.max(mtcars[,colindex])
car <- mtcars[carsname,]
return(car)
}
colbest("mpg")
colbest("hp")
# 1. print out hello world!
print("hello world!")
# 2. create a vector with the ages 23 and 53
ages <- c(23, 53)
# 3. print out the first varaible in the vector
ages[1]
# 4. set jeff equal to 45
jeff <- 45
# 5. add one to jeff
jeff + 1
# 7. create a string test that says "this is a test and print it out
string <- "this sia a test and print it out"
string
# 7. create a string test that says "this is a test and print it out
string <- "this is  a test and print it out"
# 7. create a string test that says "this is a test and print it out
string <- c("this is  a test and print it out")
string
# 7. create a string test that says "this is a test and print it out
string <- "this is  a test and print it out"
# 7. create a string test that says "this is a test and print it out
string <- "this is a test and print it out"
# 8. what is the total of the age array
sum(ages)
# 9. what is the mean of the age array
mean(ages)
# 10. how to check documentation of mean
?mean
# 11. create an vector familyAge with 23, 42, 24, 18
familyAges <- c(23, 42,24,18)
# 12. create a vector familyName with joh, cate troy sonia
familyNames <- c("john", "Cate", "Troy", "Sonia")
# 13. using the names function give the ages the family name (HINT: use the documentation for names)
?names
names(ages)
names(familyAges)
names(familyNames)
z <- list(a = 1, b = "c", c = 1:3)
names(z)
names(z)[3] <- "c2"
names(familyNames) <- familyAges
names(familyNames) <- familyAges
names(familyNames)
names(familyAges) <- familyNames
familyAges
# 1. create a dataframe with names (jeff, jen, joe) and gpa (3.9, 3.8, 3.6) and print out the structure
names <- c("Jeff", "Jen", "Joe")
# 1. create a dataframe with names (jeff, jen, joe) and gpa (3.9, 3.8, 3.6) and print out the structure
names <- c("Jeff", "Jen", "Joe")
gpa <- c(3.9, 3.8, 3.6)
myDf <- data.frame(names, gpa)
myDf
# 2. Add a new row for pat, 3.3 in the df(HINT: use rbind)
?rbind
newRow <- c("Pat", 3.3)
myDf <- rbind(myDf, newRow)
View(myDf)
# 1. create a dataframe with names (jeff, jen, joe) and gpa (3.9, 3.8, 3.6) and print out the structure
names <- c("Jeff", "Jen", "Joe")
gpa <- c(3.9, 3.8, 3.6)
myDf <- data.frame(names, gpa)
# 2. Add a new row for pat, 3.3 in the df(HINT: use rbind)
?rbind
newRow <- c("Pat", 3.3)
myDf <- rbind(myDf, newRow)
# 1. create a dataframe with names (jeff, jen, joe) and gpa (3.9, 3.8, 3.6) and print out the structure
names <- c("Jeff", "Jen", "Joe")
# 1. create a dataframe with names (jeff, jen, joe) and gpa (3.9, 3.8, 3.6) and print out the structure
names <- c("Jeff", "Jen", "Joe")
# 1. create a dataframe with names (jeff, jen, joe) and gpa (3.9, 3.8, 3.6) and print out the structure
names <- c("Jeff", "Jen", "Joe")
# 1. create a dataframe with names (jeff, jen, joe) and gpa (3.9, 3.8, 3.6) and print out the structure
names <- c("Jeff", "Jen", "Joe")
# 1. create a dataframe with names (jeff, jen, joe) and gpa (3.9, 3.8, 3.6) and print out the structure
names <- c("Jeff", "Jen", "Joe")
gpa <- c(3.9, 3.8, 3.6)
myDf <- data.frame(names, gpa)
# 2. Add a new row for pat, 3.3 in the df(HINT: use rbind)
?rbind
newRow <- c("Pat", 3.3)
myDf <- rbind(myDf, newRow)
# 3. create a new vector age (30, 25, 38, 22) and add the column to the dfcolumn bind
age <- c(30,25,38,22)
myDf <- cbind(myDf, age)
View(myDf)
View(myDf)
# 4. print out value from row one and column one
myDf[1,1]
# 5. print out the value from row 1
myDf[1,]
# 6. print out the value from column 1
myDf[,1]
# 7. add 2 years to everyone age
myDf$age <- myDf$age + 2
# 8.change chr to num (HINT: use as.numeric)
myDf$gpa<- as.numeric(myDf$gpa)
# 9. add a new column agePerGpa divide gpa by age
myDf$agePerGpa <- myDf$gpa / myDf$age
# 10. find the max age and print it out (HINT: use which.max)
which.max(myDf$age)
myDf$age[3]
myDf$age[index]
# 10. find the max age and print it out (HINT: use which.max)
index <- which.max(myDf$age)
myDf$age[index]
#creating a data frame
# create vector familyNames ("Dad", "Mom", "Sis", "Bro", "Dog")
familyNames <- c("Dad", "Mom", "Sis", "Bro", "Dog")
# create vector familyAges (43, 42, 12, 8, 5)
familyAges <- c(43, 42, 12, 8, 5)
# view the second value in familyAges
familyAges[2]
# create vector familyGenders ("Male","Femal", "Female", "Male", "Female")
familyGenders <- c("Male","Femal", "Female", "Male", "Female")
# create vector familyWeight (188, 136, 83, 61, 44)
familyWeight <- c(188, 136, 83, 61, 44)
# create a dataframe with names, age, gender and weight
myData <- data.frame(familyNames, familyAges, familyGenders, familyWeight)
#explore data frames
# str of the dataframe
str(myData)
#summary of the dataframe
summary(myData)
#head of the dataframe
head(myData)
#head of the dataframe but just the first 2 values
head(myData,2)
#tail fo the datafram but just the last 2 values
head(myData,-2)
?head
#tail fo the datafram but just the last 2 values
head(myData,-2)
#tail fo the datafram but just the last 2 values
head(myData,2)
#tail fo the datafram but just the last 2 values
head(myData,3)
#tail fo the datafram but just the last 2 values
head(myData, -2)
#tail fo the datafram but just the last 2 values
head(-myData, 2)
#tail fo the datafram but just the last 2 values
tail(myData, 2)
# Task 1
# copy original dataframe into a new one: my_mtcars
my_mtcars <- mtcars
# 1: investigate my_mtcars using str function. How many variables and observations are included in this dataframe?
str(my_mtcars)
View(my_mtcars)
# 2: calculate engine displacement per cylinder and save it as a new variable 'UnitEngine' in the dataframe. Populate the two XXXX below
my_mtcars$UnitEngine <- my_mtcars$disp / my_mtcars$cy
# 3. summarize the new variable 'UnitEngine': use summary function
summary(my_mtcars$UnitEngine)
# Task 2
# 4. create a numeric vector 'Pets' with this numbers (1,1,1,0,0)
Pets <- c(1,1,1,0,0)
# 5. create a numeric vector 'Order' with these numbers (3,1,2,3,3)
Orders <- c(3,1,2,3,3)
# create a numeric vector 'Siblings'(0,3,5,0,0)
Siblings <- c(0,3,5,0,0)
# create a numeric vector 'IDs' (1,2,3,4,5)
IDs <- c(1,2,3,4,5)
# 6. Combine those four numeric vectors together into a dataframe called 'myFriends'. You must use data.frame function
myFriends <- data.frame(Pets, Orders, Siblings, IDs)
# 7. report the structure of the dataframe
str(myFriends)
# 8. summarize the dataframe. Use summary function
summary(myFriends)
# list (or print) all of the values for 'IDs' variable in the dataframe
myFriends$IDs
# list all of the values for 'Pets' variable in the dataframe
myFriends$Pets
# 9. list all of the values for 'Order' variable in the dataframe
myFriends$Orders
# list all of the values for 'Siblings' variable in the dataframe
myFriends$Siblings
# # 10. write a code to print the values in the fifth observation of the Pets variable
myFriends$Pets[5]
## 11. add a vector called 'age' to 'myFriends' using cbind function. *** YOU MUST USE cbind FUNCTION to receive full grades.(23, 21, 45, 21, 18)
age <- c(23, 21, 45, 21, 18)
myFriends <- cbind(myFriends,age)
## 12. define a vector called 'names' by including all the names in a vector. Add a vector 'names' to 'myFriends' using cbind function.  Print the structure of 'myFriends'. What is the data type (among: factor, numeric, logical, string) of the 'names'? ("John", "Smith", "Susan", "Joe", "Wendy")
names <- ("John", "Smith", "Susan", "Joe", "Wendy")
## 12. define a vector called 'names' by including all the names in a vector. Add a vector 'names' to 'myFriends' using cbind function.  Print the structure of 'myFriends'. What is the data type (among: factor, numeric, logical, string) of the 'names'? ("John", "Smith", "Susan", "Joe", "Wendy")
names <- c("John", "Smith", "Susan", "Joe", "Wendy")
myFriends <- cbind(myFriends, names)
str(myFriends)
# 2: calculate engine displacement per cylinder and save it as a new variable 'UnitEngine' in the dataframe. Populate the two XXXX below
my_mtcars$UnitEngine <- my_mtcars$disp / my_mtcars$cyl
#length of the df
length(myCars)
# Chapter 6 - Sorting Dataframes
#set mtcars dataframe as own dataframe
myCars <- mtcars
#length of the df
length(myCars)
#head of the df
hed(myC)
#head of the df
hed(myCars)
#head of the df
head(myCars)
#tail of the df
tail(myCars)
#find max mpg
maxMpg <- which.max(myCars$mpg)
myCars[maxMpg]
myCars[maxMpg,]
#find all cars with mpg higher than 29
above <- which(mycars$mpg > 29,)
#find all cars with mpg higher than 29
above <- which(myCars$mpg > 29,)
above
#find all cars with mpg higher than 29
above <- which(c(myCars$mpg > 29,))
#find all cars with mpg higher than 29
above <- which[myCars$mpg > 29,]
#find max mpg
maxMpg <- which(myCars$mpg)
maxMpg <- maz(myCars$mpg)
maxMpg <- max(myCars$mpg)
#find all cars with mpg higher than 29
above <- myCars[myCars$mpg > 29, }
#find all cars with mpg higher than 29
above <- myCars[myCars$mpg > 29, ]
View(above)
#find max mpg using which max
mpgWhichMax <- which.max(myCars$mpg)
mpgWhichMax
myCars[20]
myCars[20,]
# new df with it having the lowest mpg first using order function
sortLow <- myCars[order(-myCars$mpg)]
# new df with it having the lowest mpg first using order function
sortLow <- myCars[order(-myCars$mpg)]
# new df with it having the lowest mpg first using order function
sortLow <- myCars[order(-myCars$mpg),]
View(sortLow)
# new df with it having the lowest mpg first using order function
sortLow <- myCars[order(myCars$mpg),]
# new df with it having the highest mpg first
sortHight <- myCars[order(-myCars$mpg),]
View(sortHight)
library(readr)
#load the file
testFrame <- read_csv("~/Downloads/nst-est2011-01.csv")
# read the first few lines
head(testFrame)
# find structure of the df
str(testFrame)
View(testFrame)
#remove rows and columns
testFrame <- testFrame[-1:-8]
View(testFrame)
#load the file
testFrame <- read_csv("~/Downloads/nst-est2011-01.csv")
# read the first few lines
head(testFrame)
# find structure of the df
str(testFrame)
#remove rows and columns
testFrame <- testFrame[-1:-8,]
View(testFrame)
testFrame <- testFrame[,-6:-10]
View(testFrame)
testFrame <- testFrame[-52:-58,]
View(testFrame)
#change col names
testFrame$StateName <- testFrame$`table with row headers in column A and column headers in rows 3 through 4. (leading dots indicate sub-parts)`
View(testFrame)
#load the file
testFrame <- read_csv("~/Downloads/nst-est2011-01.csv")
# read the first few lines
head(testFrame)
# find structure of the df
str(testFrame)
#remove rows and columns
testFrame <- testFrame[-1:-8,]
testFrame <- testFrame[, -6:-10]
testFrame <- testFrame[-52:-58,]
#change col names
colNames <- colnames(testFrame)
colNames
colNames
colNames
newcol <- c("StateName", "Census", "Base", "Census2010", "Census2011")
colnames(testFrame)
colnames(testFrame) <- newcol
View(testFrame)
# cleaning up the elements remove the . from stateName using gsub
testFrame$StateName <- gsub("\\.", '', testFrame$StateName)
# change type to num and remove the . from the rest
testFrame$Census <- as.numeric(testFrame$Census)
# change type to num and remove the . from the rest
testFrame$Census <- as.numeric(gsub(",", '', testFrame$Census))
#load the file
testFrame <- read_csv("~/Downloads/nst-est2011-01.csv")
# read the first few lines
head(testFrame)
# find structure of the df
str(testFrame)
#remove rows and columns
testFrame <- testFrame[-1:-8,]
testFrame <- testFrame[, -6:-10]
testFrame <- testFrame[-52:-58,]
#change col names
colNames <- colnames(testFrame)
colNames
newcol <- c("StateName", "Census", "Base", "Census2010", "Census2011")
colnames(testFrame) <- newcol
# cleaning up the elements remove the . from stateName using gsub
testFrame$StateName <- gsub("\\.", '', testFrame$StateName)
# change type to num and remove the . from the rest
testFrame$Census <- as.numeric(gsub(",", '', testFrame$Census))
#change col names
colnames(testFrame)
#change col names
colnames(testFrame)
newcol <- c("StateName", "Census", "Base", "Census2010", "Census2011")
colnames(testFrame) <- newcol
#load the file
testFrame <- read_csv("~/Downloads/nst-est2011-01.csv")
# read the first few lines
head(testFrame)
# find structure of the df
str(testFrame)
#remove rows and columns
testFrame <- testFrame[-1:-8,]
testFrame <- testFrame[, -6:-10]
testFrame <- testFrame[-52:-58,]
#change col names
colnames(testFrame)
newcol <- c("StateName", "Census", "Base", "Census2010", "Census2011")
colnames(testFrame) <- newcol
# cleaning up the elements remove the . from stateName using gsub
testFrame$StateName <- gsub("\\.", '', testFrame$StateName)
# cleaning up the elements remove the . from stateName using gsub
testFrame$StateName <- gsub("\\.", '', testFrame$StateName)
# change type to num and remove the . from the rest
testFrame$Census <- as.numeric(gsub(",", '', testFrame$Census))
#load the file
testFrame <- read_csv("~/Downloads/nst-est2011-01.csv")
# read the first few lines
head(testFrame)
# find structure of the df
str(testFrame)
#remove rows and columns
testFrame <- testFrame[-1:-8,]
testFrame <- testFrame[, -6:-10]
testFrame <- testFrame[-52:-58,]
#change col names
colnames(testFrame)
newcol <- c("StateName", "Census", "Base", "Census2010", "Census2011")
colnames(testFrame) <- newcol
# cleaning up the elements remove the . from stateName using gsub
testFrame$StateName <- gsub("\\.", '', testFrame$StateName)
testFrame$Base <- as.numeric(gsub(",", '', testFrame$Base))
testFrame$Census <- as.numeric(gsub(",", '', testFrame$Census))
testFrame$Census2010 <- as.numeric(gsub(",", '', testFrame$Census2010))
testFrame$Census2011 <- as.numeric(gsub(",", '', testFrame$Census2011))
bestMPG <- function(){
index <- which.max(mtcars$mpg)
car <- mtcars[index,]
return(car)
}
bestMPG()
bestMPGName <- function(){
index <- which.max(mtcars$mpg)
rnames <- rownames(mtcars)
car <- rnames[index]
return(car)
}
bestMPGName()
bestMPG <- function(){
index <- which.max(mtcars$mpg)
best <- mtcars[index,]
return(best)
}
bestMPG()
rownames(mtcars)
bestMPGName <- function(){
carNames <- rownames(mtcars)
index <- which.max(mtcars$mpg)
name <- carNames[index]
return(name)
}
bestMPGName()
#read the dataset
library(readr)
us_tuition <- read_excel("Desktop/coding/DS Project/us_avg_tuition.xlsx")
us_tuition <- read_excel("Desktop/coding/DS Project/us_avg_tuition.xlsx")
us_avg_tuition <- read_excel("Desktop/coding/DS Project/us_avg_tuition.xlsx")
us_avg_tuition <- read_xlsx("Desktop/coding/DS Project/us_avg_tuition.xlsx")
library(readr)
UFC_Fantasy_xlsx_Series_totals_Season_4_ <- read_csv("Desktop/coding/UFC Fantasy.xlsx - Series totals (Season 4) .csv")
View(UFC_Fantasy_xlsx_Series_totals_Season_4_)
df1 <- data.frame(
id = c(1, 2, 3),
name = c("Alice", "Bob", "Charlie")
)
library(tidyverse)
str(pokemon)
ggplot(pokemon_group, aes(x=Attack, y=Defense, color = Legendary))  + geom_jitter() + theme_classic() + ggtitle("Attack Vs Defense by Type1")
df1 <- data.frame(
id = c(1, 2, 3),
name = c("Alice", "Bob", "Charlie")
)
df2 <- data.frame(
id = c(2, 3, 4),
age = c(25, 30, 35)
)
# Perform an inner join
result <- left_join(df1, df2, by = "id")
print(result)
str(pokemon)
pokemon <- read_csv("Desktop/projects/datasets/pokemon.csv")
str(pokemon)
df1 <- data.frame(
id = c(1, 2, 3),
name = c("Alice", "Bob", "Charlie")
)
ggplot(pokemon_group, aes(x=Attack, y=Defense, color = Legendary))  + geom_jitter() + theme_classic() + ggtitle("Attack Vs Defense by Type1")
df1 <- data.frame(
id = c(1, 2, 3),
name = c("Alice", "Bob", "Charlie")
)
pokemon_group <- pokemon %>%
group_by(Gen) %>%
summarize(meanAtk = mean(HP))
ggplot(pokemon, aes(x=Attack, y=Defense, color = Legendary))  + geom_jitter() + theme_classic() + ggtitle("Attack Vs Defense by Type1")
colnames(pokemon)
cnames2 <- c("#", "Name", "T1", "T2", "HP", "Attack", "Defense", "SP.Atk", "SP.Def", "Speed", "Gen", "Legendary")
colnames(pokemon) <- cnames2
pokemon_group <- pokemon %>%
group_by(Gen) %>%
summarize(meanAtk = mean(HP))
ggplot(pokemon_group, aes(x=Attack, y=Defense, color = Legendary))  + geom_jitter() + theme_classic() + ggtitle("Attack Vs Defense by Type1")
colnames(pokemon) <- cnames2
ggplot(pokemon_group, aes(x=meanAtk, color = Gen))  + geom_jitter() + theme_classic() + ggtitle("Attack Vs Defense by Type1")
ggplot(pokemon_group, aes(x=meanAtk, y = Gen ,color = Gen))  + geom_jitter() + theme_classic() + ggtitle("Attack Vs Defense by Type1")
source("~/Desktop/projects/pokemon analyis.R", echo=TRUE)
source("~/Desktop/projects/pokemon analyis.R", echo=TRUE)
source("~/Desktop/projects/pokemon analyis.R", echo=TRUE)
source("~/Desktop/projects/pokemon analyis.R", echo=TRUE)
ggplot(pokemon_group, aes( x = meanAtk))  + geom_histogram() + theme_classic() + ggtitle("Attack Vs Defense by Type1")
source("~/Desktop/projects/pokemon analyis.R", echo=TRUE)
library(readr)
flights <- read_csv("Desktop/Master/Summer_24/Data visualization/archive (1)/flights.csv")
View(flights)
## install.packages("tidytuesdayR")
library(tidytuesdayR)
tuesdata <- tidytuesdayR::tt_load('2025-02-11')
View(tuesdata)
head(tuesdata)
cdc_datasets <- tuesdata$cdc_datasets
fpi_codes <- tuesdata$fpi_codes
omb_codes <- tuesdata$omb_codes
getwd
setwd("~/Desktop/github/DatasetPractice")
write.csv(cdc_datasets, "~/Desktop/github/DatasetPractice", row.names = TRUE)
write.csv(cdc_datasets, "~/Desktop/github/DatasetPractice", row.names = FALSE)
#write.csv(cdc_datasets, "~/Desktop/github/DatasetPractice", row.names = FALSE)
dir.exists("~/Desktop/github/DatasetPractice")
write.csv(cdc_datasets, "~/Desktop/github/DatasetPractice/cdc_datasets.cvs", row.names = FALSE)
write.csv(cdc_datasets, "~/Desktop/github/DatasetPractice/cdc_datasets.csv", row.names = FALSE)
write.csv(cdc_datasets, "~/Desktop/github/DatasetPractice/cdc_datasets2.csv", row.names = TRUE)
write.csv(fpi_codes, "~/Desktop/github/DatasetPractice/fpi_codes.csv", row.names = FALSE)
write.csv(omb_codes, "~/Desktop/github/DatasetPractice/omb_codes.csv", row.names = FALSE)
#1.Can you describe the structure of the datasets you are working with?
head(cdc_datasets)
View(cdc_datasets)
head(fpi_codes)
head(omb_codes)
View(omb_codes)
View(fpi_codes)
